# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import math
import codecs
import binascii
from Crypto.Util.number import long_to_bytes
from PIL import Image
from Crypto.PublicKey import RSA
'''
print("INT to ascii!")
a = [99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125]
for x in a:
    print(chr(x), end="")

print("\n\nHEX")
b = "63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d"
print(bytes.fromhex(b).decode('ascii'))

print("\nBase64")
c = "72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf"
print(codecs.encode(codecs.decode(c, 'hex'), 'base64').decode())

print("\nBytes and Big Integer")
d = 11515195063862318899931685488813747395775516287289682636499965282714637259206269
print(long_to_bytes(d))

print("\n====================================================")
print('XOR')
t = "label"
o = ""
for i in t:
    o += chr(ord(i)^13)
print(o)

print('\nProperties')
"""
KEY1 = a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313
KEY2 ^ KEY1 = 37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e
KEY2 ^ KEY3 = c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1
FLAG ^ KEY1 ^ KEY3 ^ KEY2 = 04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf
"""
key1 = int("a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313", 16)
key23 = int("c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1", 16)
key123 = int("04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf", 16)
flag = hex(key123^key1^key23)[2:]
print(bytes.fromhex(flag).decode('ascii'))

print('\nFavorite')
e = "73626960647f6b206821204f21254f7d694f7624662065622127234f726927756d"
nums = binascii.unhexlify(e)
f = ""
for i in range(2**8):
    for num in nums:        
        f += chr(num ^ i)
    if f[:6] == "crypto":
        break
    else:
        f = ""
print(f)


print("\nYou either know, XOR you don't")
g = binascii.hexlify(b"myXORkey").decode()
g1 = ""

h = "0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104"
for i in range(0, len(h), len(g)):
    h1 = h[i:i+len(g)];
    j = int(h1, 16)^int(g[:len(h1)], 16)
    g1 += long_to_bytes(j).decode()
print(g1)

print("\nImages")
import numpy as np

# Open images
im1 = Image.open("flag.png")
im2 = Image.open("lemur.png")

# Make into Numpy arrays
im1np = np.array(im1)*255
im2np = np.array(im2)*255

# XOR with Numpy
result = np.bitwise_xor(im1np, im2np).astype(np.uint8)

# Convert back to PIL image and save
Image.fromarray(result).save('result.png')

print("\nGCD")
print(math.gcd(66528, 52920))

def gcdExtended(a, b):  
    # Base Case  
    if a == 0 :   
        return b,0,1
             
    gcd,x1,y1 = gcdExtended(b%a, a)  
     
    # Update x and y using results of recursive  
    # call  
    x = y1 - (b//a) * x1  
    y = x1  
     
    return gcd,x,y 
      
  
# Driver code 
a, b = 26513, 32321
g, x, y = gcdExtended(a, b)  
print("gcd(", a , "," , b, ") = ", g)
print(x, y)

print("\nMOD")
print(math.remainder(8146798528947, 17))

print("\nPEM")
cert = RSA.import_key(open("keypair.pem", "r").read())
print(cert.d)

print("\nDER")
import OpenSSL.crypto
der = open("2048b-rsa-example-cert.der", "rb").read()
print(RSA.importKey(OpenSSL.crypto.dump_publickey(OpenSSL.crypto.FILETYPE_ASN1, OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, der).get_pubkey())).n)

print("\nQuadratic Residue")
for i in range(29):
    t = (i*i)%29
    if t == 14:
        print("it's 14", i)
    if t == 11:
        print("it's 11", i)
    if t == 6:
        print("it's 6", i)
        
print("\nLegendre Symbol")
p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139

ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]

n=0
a = 0

for i in ints:
    if pow(i, (p-1)//2, p) == 1:
        n = i
        break

print(pow(n, (p+1)//4, p))
print(p - pow(n, (p+1)//4, p))

print((5*11*14+11*17+5*17*10)%935)
'''

file = open("story.txt", "r").read()
o=''

for i in file:
    o += chr(ord(i)^127)
print(o)